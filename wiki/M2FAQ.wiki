#summary GWT-Maven FAQ.

= Introduction =

There are some gaps between the current M2 checked-in docuemtation and what is deployed.  Here are a few FAQs for until we deploy then next release.

= Details =

*Q)  Cannot assign configuration entry 'compileTarget' to 'class
[Ljava.lang.String;' from '[com.shd.gwt.client.FormEditor]', which is of
type class java.lang.String*

In the latest plugin release, compileTarget was changed to take an array.  This means your POM should have a section that looks like:

{{{
<compileTarget>
    <value>my.compile.target</value>
</compileTarget>
}}}

rather than 
{{{
<compileTarget>my.compile.target</compileTarget>
}}}


*Q)  Using the POM in the documentation, I cannot download the plugin.*

You need to add a plugin repository:

{{{
<pluginRepositories>
  <pluginRepository>
    <id>gwt-maven</id>
    <url>http://gwt-maven.googlecode.com/svn/trunk/mavenrepo</url>
  </pluginRepository>
</pluginRepositories>
}}}

*Q)  I'm having problems compiling multi-module GWT applications.  How do I make it work?

When building client code, the GWT compiler, not only needs bytecode for dependent classes, but also needs access to the source code.  This means any GWT modules your module depends on will need to have the source code packaged in it.  The easiest way to do this is to use the `resources` section of your POM's `build` stanza.  e.g.

{{{
<build>
   <!-- All your plugins are here -->

   <resources>
    <resource>
      <directory>src/main/java</directory>
    </resource>
  </resources>
</build>  
}}}

another way to do this is to use the antrun plugin

{{{
<build>
  <plugins>
  ...
    <plugin>
      <artifactId>maven-antrun-plugin</artifactId>
      <executions>
        <execution>
          <phase>process-classes</phase>
          <configuration>
            <tasks>
              <copy todir="${project.build.outputDirectory}">
                <fileset dir="${project.build.sourceDirectory}">
                  <include name="**/*.java" />
                </fileset>
              </copy>
            </tasks>
          </configuration>
          <goals>
            <goal>run</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
  ...
  </plugins>
</build>

}}}