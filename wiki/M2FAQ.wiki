#summary M2 version FAQ.

= Introduction =

These are commonly encountered questions regarding the M2 version of GWT-Maven. 

= Details =

*Q)  I seem to have a conflict with another plugin that has the same prefix "gwt". How do I use multiple repositories that hava different plugins with the same prefixes?

If you get errors that indicate the plugin does not exist, such as: "The plugin
'org.apache.maven.plugins:maven-gwt-plugin' does not exist or no valid
version could be found", it may be because you have another repository enabled that has a different plugin with the gwt prefix.  

To work around this (if you need both repos), try using the fully qualified name for the GWT-Maven plugin:  
{{{
mvn com.totsp.gwt:maven-googlewebtoolkit2-plugin:gwt
}}}


*Q)  I'm having problems compiling multi-module GWT applications.  How do I make it work?

When building client code, the GWT compiler, not only needs bytecode for dependent classes, but also needs access to the source code.  This means any GWT modules your module depends on will need to have the source code packaged in it.  The easiest way to do this is to use the `resources` section of your POM's `build` stanza.  e.g.

{{{
<build>
   <!-- All your plugins are here -->

   <resources>
    <resource>
      <directory>src/main/java</directory>
    </resource>
  </resources>
</build>  
}}}

another way to do this is to use the antrun plugin

{{{
<build>
  <plugins>
  ...
    <plugin>
      <artifactId>maven-antrun-plugin</artifactId>
      <executions>
        <execution>
          <phase>process-classes</phase>
          <configuration>
            <tasks>
              <copy todir="${project.build.outputDirectory}">
                <fileset dir="${project.build.sourceDirectory}">
                  <include name="**/*.java" />
                </fileset>
              </copy>
            </tasks>
          </configuration>
          <goals>
            <goal>run</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
  ...
  </plugins>
</build>

}}}

and yet another way is to use the maven-source-plugin


{{{ 

               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <attach>true</attach>
                </configuration>
}}}

Depend on the sources this way:
{{{

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>gotm-jar</artifactId>
            <version>${project.version}</version>
            <classifier>sources</classifier>
            <scope>provided</scope>
            <type>jar</type>
        </dependency>
...
   <dependency>
      <groupId>com.company</groupId>
      <artifactId>myservice</artifactId>
      <version>1.0</version>
      <classifier>sources</classifier>
   </dependency>

}}}



*Q)  I have some dependency with JDT in it, and things are not working (for example Drools).  What do I do?

The GWT dev jar itself includes JDT stuff, so you have to exclude it from other deps that have it to avoid conflicts.  For example:

{{{
<dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-core</artifactId>
      <version>4.0.4</version>
      <exclusions>
        <exclusion>
          <groupId>org.eclipse.jdt</groupId>
          <artifactId>core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-compiler</artifactId>
      <version>4.0.4</version>
      <exclusions>
        <exclusion>
          <groupId>org.eclipse.jdt</groupId>
          <artifactId>core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
}}}


*Q)  I need some special files to end up at a particular path in the embedded hosted mode Tomcat instance - for example persistence.xml, or applicationContext.xml. How do I get them there? 

For now, GWT-Maven does not do this automatically, if you have a setup like this though, you can use the AntRun plugin to copy them across (in the future we may add a property for GWT-Maven to handle these automatically, for now, use AntRun). 

{{{
<plugin>				
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>applicationContextCopy</id>
						<phase>package</phase>
						<configuration>
							<tasks>
							    <!--  TODO, use the maven properties here, rather than hard coded paths -->
								<copy
									file="${basedir}/src/main/webapp/WEB-INF/applicationContext.xml"
									toFile="${basedir}/target/tomcat/webapps/ROOT/WEB-INF/applicationContext.xml" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

}}}