gwt-maven 

 This is a plugin to provide support for Google Web Toolkit projects, including
 running the GWT developer tools and performing support operations to help
 developers make GWT fit more closely in with their standard JEE web application
 development.

* Goals Overview

 * gwt:gwt runs the project in the GWTShell

 * gwt:debug runs the project in GWTShell, starting a blocking debugger on 
   the shell's host port.

 * gwt:compile compiles the GWT application into the destination WAR root.

 * gwt:mergewebxml inspects the module descriptor and adds servlet references to
   the web web.xml file in the webapp directory. The output of this process is
   written to target/web.xml.

 * gwt:generateClientBeans this will generate client side beans based on introspection
   of beans in your project. The generated source will be written into your
   Java source directory.

* Setup

 Before you can use gwt-maven, you need to set up a profile in your user directory.
 For example:

+--
 <?xml version="1.0" encoding="UTF-8"?>
 <settings>
   <profiles>
     <profile>
       <id>gwt-1.2.22</id> 
       <properties>
         <google.webtoolkit.home>/Users/cooper/gwt-mac-1.2.22</google.webtoolkit.home>
         <google.webtoolkit.extrajvmargs>-XstartOnFirstThread</google.webtoolkit.extrajvmargs>
       </properties>
     </profile>
     <profile>
       <id>gwt-1.3.3</id> 
       <properties>
         <google.webtoolkit.home>/Users/cooper/gwt-mac-1.3.3</google.webtoolkit.home>
         <google.webtoolkit.extrajvmargs>-XstartOnFirstThread</google.webtoolkit.extrajvmargs>
       </properties>
     </profile>
   </profiles> 
   <activeProfiles>
     <activeProfile>gwt-1.3.3</activeProfile>
   </activeProfiles>
</settings>

+--

 Above you see two GWT profiles, with the gwt-1.3.3 profile active. It is critical
 that you have google.webtoolkit.home configured. The extrajvmargs is only 
 critical if you use a Macintosh. In that case you must specify -XstartOnFirstThread.

* POM files

 To use the gwt-maven plugin, you need to include it in your POM's plugins section,
 and the appropriate dependencies.
 For example:

+--

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.me</groupId>
    <artifactId>user-sample</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>GWT User example</name>
    <url>http://maven.apache.org</url>
    <repositories>
        <repository>
            <id>gwt-maven</id>
            <url>http://gwt-maven.googlecode.com/svn/trunk/mavenrepo/</url>
        </repository>
    </repositories>

+--

 ...add the gwt-maven repository to your project.

+--

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <version>1.3.3</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <version>1.3.3</version>
        </dependency>

+--

 ...the gwt-maven repository provides gwt-user and gwt-servlet. You should remember to mark
 gwt-user as "provided" so it is not included in your WAR file.

+--
        <dependency>
            <groupId>com.googlecode.gwtx</groupId>
            <artifactId>GWTx</artifactId>
            <version>20070110</version>
        </dependency>
    </dependencies>

+--

 ...if you wish to use the PropertyChangeSupport on classes from the bean generator
 you should include GWTx in your project! This is also available in the gwt-maven
 repository.

+--

    <build>
        <finalName>user-sample</finalName>
        <plugins>
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId> 
                <artifactId>maven-compiler-plugin</artifactId> 
                <version>2.0</version> 
                <configuration> 
                    <source>1.5</source> 
                    <target>1.5</target> 
                </configuration>   
            </plugin>
            <plugin>
                <groupId>com.totsp.gwt</groupId>
                <artifactId>maven-googlewebtoolkit2-plugin</artifactId>
                <configuration>
                    <logLevel>ALL</logLevel>
                    <runTarget>com.me.MyModule/MyHostPage.jsp</runTarget>
                    <compileTarget>com.me.MyModule</compileTarget>

+--

 ...you must set AT LEAST compileTarget to your module's name. See the config
 options for all the details.

+--
                    <generatorRootClasses>com.me.server.MyBean</generatorRootClasses>
                    <generatorDestinationPackage>com.me.client</generatorDestinationPackage>
                    <generateGettersAndSetters>true</generateGettersAndSetters>
                </configuration>
                <executions> 
                    <execution> 
                        <goals> 
                            <goal>mergewebxml</goal> 
                            <goal>compile</goal> 
                        </goals> 
                    </execution> 
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.0</version>
                <configuration>
                    <webXml>target/web.xml</webXml>
+--

 ...if you want to use the mergewebxml functionality, you must specify the 
 merged file as the webXml property for the WAR plug in.

+--
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

+--