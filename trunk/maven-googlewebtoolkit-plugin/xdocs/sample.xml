<?xml version="1.0" encoding="ISO-8859-1"?>


<document>

	<properties>
		<title>
			GWT RPC Sample using the maven-googlewebtoolkit-plugin 1.x
			(gwt-maven)
		</title>
	</properties>

	<body>
		<section
			name="GWT RPC Sample using the maven-googlewebtoolkit-plugin 1.x (gwt-maven)">
			<subsection name="Where is the sample">
				The maven-googlewebtoolkit-sample code is hosted at
				Google Code:
				<a
					href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/">
					http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/
				</a>
			</subsection>

			<subsection name="What is in the sample">
				The sample is provided to demonstrate using the
				maven-googlwebtoolkit-plugin 1.x version (gwt-maven)
				with a sample project.  Other projects can be setup in 
				the same manner as the sample to get things rolling 
				(use the sample as a template). 

				The sample however is more than that, it is *also* a
				useful overview of GWT RPC in general and provides an
				example of USING A DATASOURCE with GWT RPC which works
				in Hosted Mode and when deployed. (It's a valuable
				reference even if you are not using Maven.)

				The sample is a simple GWT web app with a single form
				element where you enter your name. That entry is then
				sent to the server via GWT RPC and it is stored in an
				HSQL database along with a timestamp. Then the results
				of all the entries (since the server was last started,
				mem db) are returned to the client and displayed on the
				page.

				This demonstrates configuring the gwt-maven plugin along
				with *<a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/web/META-INF/context.xml">context.xml</a>* 
				and *<a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/web/WEB-INF/web.xml">web.xml</a>* in order to setup a
				container managed DataSource and have that setup matter
				in the "Tomcat Lite" that is used in GWT Hosted Mode.				 				
			</subsection>

			<subsection name="Step by Step GWT RPC in the sample">
				<p>
					STEP 1:
					<br />
					Create a CLIENT side service interface which extends
					GWT RemoteService. This is demonstrated in the
					sample
					<a
						href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/client/MyService.java">
						MyService.java
					</a>
					class.
					<br />
					<br />
					STEP 2:
					<br />
					Create a CLIENT side ASYNC service interface with
					the SAME NAME and the suffix "Async" as the initial
					client side class that extends RemoteService. This
					class should be identical to the RemoteService
					interface with two exceptions: the return type of
					each method should be void, and an additional
					AsyncCallBack object should be the last parameter of
					each method. This is demonstrated in the sample
					<a
						href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/client/MyServiceAsync.java">
						MyServiceAsync.java
					</a>
					class.
					<br />
					<br />
					STEP 3:
					<br />
					Still within CLIENT side code create the service
					object with a defined endpoint (path) and invoke the
					methods. This is demonstrated in the sample
					<a
						href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/client/MyProjectEntryPoint.java">
						MyProjectEntryPoint.java
					</a>
					class.
					<br />
					<br />
					Note that the service object is created with the GWT
					static create method:
					<code>
						MyServiceAsync service = (MyServiceAsync)
						GWT.create(MyService.class);
					</code>
					and that the endpoint assigned to the service is set
					using the "moduleBaseURL" path:
					<code>
						endpoint.setServiceEntryPoint(GWT.getModuleBaseURL()
						+ "MyService");
					</code>
					. This ensures that the service path will be
					accessible BOTH in Hosted Mode with GWTShell and
					when later deployed to a servlet container.
					<br />
					<br />
					STEP 4:
					<br />
					Create a SERVER side implementation of the client
					side side service interface which extends GWT
					RemoteServiceServlet. This is demonstrated in the
					sample
					<a
						href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/server/MyServiceImpl.java">
						MyServiceImpl.java
					</a>
					class. Note that this sample class retrieves a
					DataSource via JNDI and then uses a small self
					created HSQL database to store and retrieve data.
				</p>
			</subsection>
			<subsection
				name="Running the sample project using the gwt-maven plugin">
				<p>
					The point of the gwt-maven plugin is to let you
					define project dependencies in a Maven pom file, and
					also let you define project specifc context.xml and
					web.xml resources, which then all matter BOTH in
					Hosted Mode and when deployed as a WAR. The plugin
					allows you to invoke the GWTShell and run against
					your project (DataSources, other Servlets, etc, all
					available even in Hosted Mode) and also allows you
					to create a deployable WAR resource in one *single
					simple step* (maven gwt:war).
					<br />
					<br />
					In order to use the maven-googlewebtoolkit-sample
					project you first have to obtain the
					<a
						href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/">
						sample code itself
					</a>
					.
					<br />
					<br />
					Then you will also need to have the
					maven-googlwebtoolkit-plugin
					<a href="install.html">installed</a>
					(along with of course Maven itself, Java, so on).
					<br />
					<br />
					Next you will need to set a platform specific value
					in the
					<a
						href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/project.properties">
						project.properties
					</a>
					file.
					<br />
					You need to specify the "google.webtoolkit.home"
					value, this should denote where you have GWT
					installed, the default is "/opt/gwt-mac-1.2.22"
					(note that simply switching this to "windows" or
					"linux" in place of "mac" does work, even on
					Windows, assuming you have installed GWT in c:\opt
					or /opt).
					<br />
					<br />
					Once you have the sample code, the plugin itself,
					and have set the appropriate platform properties you
					then can invoke the following:
					<source>maven gwt</source>
					(This will invoke the GWTShell with the sample.)
					<br />
					<br />
					or
					<source>maven gwt:war</source>
					(This will create a deployable Tomcat WAR file with
					the sample.)
					<br />
					<br />
					or any of the other
					<a href="goals.html">goals</a>
					.
				</p>
			</subsection>
			
			<subsection name="How to configure Hosted Mode Tomcat Lite (if you are not using the plugin)">
				If you do not use Maven and are not using the gwt-maven plugin then you can still
				do this stuff, you will simply need to configure things manually.  (If you DO use the plugin, 
				which is recommened - just setup your project like the sample - then all of this is done FOR
				you automatically, using the Maven properties.)
				
				First up understand that to get things working with regard to GWT and RPC services that require
				resources such as DataSources in Hosted Mode, there are several ways to get things working.  This 
				way, what the plugin ultimately does, is only one approach.  That approach is to MUNGE the Hosted Mode
				Tomcat Lite instance to include the resources it needs to run your project in hosted mode - these are 
				typically a context descriptor (context.xml) a deployment descriptor (web.xml) and dependencies (JDBC drivers and so on).
				
				Alternative techniques are using an entirely different Tomcat instance that is OUTSIDE of GWT (as elaborated upon here:
				<a href="http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/338c4b765d7dfc39/">http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/338c4b765d7dfc39</a>
				and or using MOCK objects while working in Hosted Mode.  All of these techniques (munge, externalize, mock) are viable and have pros and cons. 
				
				TO DO THE MUNGING THING:
				
				1.  Put context.xml where it needs to be:
				target/tomcat/conf/gwt/localhost/ROOT.xml 
				
				Rename context.xml to ROOT.xml and place it in tomcat/conf/gwt/localhost. 
				
				Also be aware that as of today (GWT version 1.2.22) the Hosted Mode
				"Tomcat Lite" is Tomcat version 5.0.28.  This means you need to use the long form
				for defining resources within context.xml (this form changed in Tomcat 5.5.x - see the sample
				<a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/web/META-INF/context.xml">context.xml</a>).
				
				2.  Put web.xml where it needs to be:
				/target/tomcat/webapps/ROOT/WEB-INF/web.xml 
				
				Pretty self explanatory there, same name, goes in target/tomcat/webapps/ROOT/WEB-INF.
				
				3.  Include dependencies your setup needs ON the classpath when you start GWTShell. 
				
				The Tomcat Lite provided with GWT does not have commons-pool or commons-dbcp and so on.  
				Whatever you need with your project needs to be supplied on the classpath when starting GWTShell. 
				Take a look at a simple MyProject-shell script (what ApplicationCreator creates) and you will see
				how the shell is invoked and what is included on the classpath, edit that (or provide an env var, or so on)
				to manipulate the classpath as needed.			
			</subsection>

		</section>
	</body>
</document>