<?xml version="1.0" encoding="ISO-8859-1"?>


<document>

  <properties>
    <title>GWT RPC Walk-Thru Example using the maven-googlewebtoolkit-plugin 1.x (gwt-maven)</title>
  </properties>

  <body>
  <section name="GWT RPC Walk-Thru Example using the maven-googlewebtoolkit-plugin 1.x (gwt-maven)">
    <subsection name="Simple GWT RPC Step by Step">
       <p>
       STEP 1:
       <br />
       Create a CLIENT side service interface which extends GWT RemoteService. 
       This is demonstrated in the sample <a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/client/MyService.java">MyService.java</a> class.
       <br /><br />
       STEP 2: 
       <br />
       Create a CLIENT side ASYNC service interface with the SAME NAME and the suffix "Async" as the initial client side class that extends RemoteService.
       This class should be identical to the RemoteService interface with two exceptions: the return type of each method should be void, and an additional AsyncCallBack object should be the last 
       parameter of each method.  This is demonstrated in the sample <a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/client/MyServiceAsync.java">MyServiceAsync.java</a> class.
       <br /><br />
       STEP 3:
       <br />
       Still within CLIENT side code create the service object with a defined endpoint (path) and invoke the methods.  
       This is demonstrated in the sample <a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/client/MyProjectEntryPoint.java">MyProjectEntryPoint.java</a> class. 
       <br /><br />
       Note that the service object is created with the GWT static create method: <code>MyServiceAsync service = (MyServiceAsync) GWT.create(MyService.class);</code> and that the endpoint assigned to the service is 
       set using the "moduleBaseURL" path: <code>endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + "MyService");</code>.  This ensures that the service path will be accessible BOTH in Hosted Mode with GWTShell and when later deployed 
       to a servlet container.       
       <br /><br />
       STEP 4: 
       <br />
       Create a SERVER side implementation of the client side side service interface which extends GWT RemoteServiceServlet.  
       This is demonstrated in the sample <a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/src/java/com/totsp/sample/server/MyServiceImpl.java">MyServiceImpl.java</a> class.
      </p>         
      </subsection>
      <subsection name="Running the sample project using the gwt-maven plugin">
      <p>
      The point of the gwt-maven plugin is to simplify GWT project setup and the creation of GWT deployable artifacts (WAR files), while allowing project resources to be placed where you want them (flexibility).
      <br /><br />
      In order to use the maven-googlewebtoolkit-sample project you first have to obtain and unpack the <a href="TODO">sample code itself</a>.
      <br /><br />
      Then you will also need to have the maven-googlwebtoolkit-plugin <a href="install.html">installed</a>.
      <br /><br />
      Next you will need to set a few platform and location specific values in the <a href="http://gwt-maven.googlecode.com/svn/trunk/maven-googlewebtoolkit-sample/project.properties">project.properties</a> file.
      <br />
      You need to specify the "google.webtoolkit.home" value, this should denote where you have GWT installed, the default is "/opt/gwt-mac-1.2.22" (note that simply switching this to "windows" or "linux" in place of "mac" does work, even on Windows, assuming you have installed GWT in c:\opt or /opt).
      <br />
      You also need to specify the "maven.jar.gwt-dev" value, this should denote the "dev" jar which is in use, the default is ${google.webtoolkit.home}/gwt-dev-mac.jar (again this can be changed to "windows" or "linux" as required).
      This is a jar OVERRIDE because of the proprietary nature of the gwt "dev" jar (it cannot be hosted in a public repo, you have to download it yourself and agree to the terms, so on).
      <br /><br />
      Once you have the sample code, the plugin itself, and have set the appropriate platform properties (assuming you also have standard Maven prerequisites such as Maven itself and Java, etc) you then can invoke the following:
      <source>maven gwt</source> (This will invoke the GWTShell with the sample.)
      <br /><br />
      or
      <source>maven gwt:war</source> (This will create a deployable Tomcat WAR file with the sample.)
      <br /><br />
      or any of the other <a href="goals.html">goals</a>.      
      </p>               
      </subsection>
      
  </section>
  </body>
</document>